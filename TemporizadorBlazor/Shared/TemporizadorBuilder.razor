
<div class="row">
    <button class="btn btn-dark btnAddClose offset-1 col-9 " @onclick="Close"></button>
</div>
<h3 class="row">Nuevo</h3>
<div class="row">
    <div class="col-12">
        <text>Tiempo @Time.HoursMinutesString()</text>
    </div>
    @if (ReferenceTime.IsValid())
    {
        <div class="col-12">
            <text>  <b>Referente</b> @ReferenceTime.HoursMinutesString() </text>
        </div>
    }
</div>

<div class="btnsIncrements row">
    @for (int r = 0, i = 0, rF = Rows; r < rF && i < Incrementos.Length; r++)
    {

        @for (int c = 0; c < Columns && i < Incrementos.Length; c++, i++)
        {
            int pos = i;

            <button class=@(" btn btn-info btnAddTime "+(c==0?"":"offset-1")+" col-3") @onclick="()=> { TotalIncremento += Incrementos[pos];IncrementoAnt = TotalIncremento; }">+@Incrementos[i]</button>

        }

    }
</div>
<div class="row">
    <button class="btn btn-secondary col-4" @onclick="@(() => { TotalIncremento = 0;IncrementoAnt = 1; })">Reset</button>
    <button class="btn btn-success offset-3 col-4" @onclick="@(()=> {
                                                                   double incremento = TotalIncremento;
                                                                   if(ReferenceTime.IsValid())
                                                                   {
                                                                       incremento += ReferenceTime.TotalMinutes()-DateTime.Now.TotalMinutes();
                                                                   }
                                                                   Created.InvokeAsync((int)incremento);
                                                                   IncrementoAnt = 1;
                                                               })">
        Crear
    </button>
</div>

@code {

        static int IncrementoAnt = 1;
        int[] Incrementos { get; set; } = { 1, 5, 10, 15, 30, 60 };

        int TotalIncremento { get; set; } = IncrementoAnt > 0 ? IncrementoAnt - 1 : 0;

        [Parameter] public int Columns { get; set; } = 3;
        [Parameter] public EventCallback<int> Created { get; set; }
        [Parameter] public EventCallback Close { get; set; }
        [Parameter] public DateTime ReferenceTime { get; set; } = default(DateTime);

        int Rows => Incrementos.Length % Columns == 0 ? Incrementos.Length / Columns : (Incrementos.Length / Columns) + 1;
        int Hours => TotalIncremento / 60;
        int Minutes => TotalIncremento % 60;
        DateTime Time => new DateTime((TimeSpan.FromHours(Hours) + TimeSpan.FromMinutes(Minutes)).Ticks);



}
